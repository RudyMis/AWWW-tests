/* eslint-disable no-unused-expressions */
/* eslint-disable no-undef */
/* eslint-disable func-names */
/* eslint-disable prefer-arrow-callback */
import { equal } from 'assert';
import chai, { expect } from 'chai';
import chaiHttp from 'chai-http';
import chaiAsPromised from 'chai-as-promised';
import Sinon from 'sinon';
import { getDBLocal } from '../database/db.mjs';
import { sampleTrip } from '../database/create_trip.mjs';
import { getTripFromDb, getTripReservations, getTripsFromDb } from '../database/get_data.mjs';
import app from '../app.mjs';

should = chai.should();
chai.use(chaiAsPromised);
chai.use(chaiHttp);

describe('Get from database', function () {
  const time = new Date(2022, 6);
  let clock = {};
  let db = {};

  beforeEach(async function () {
    clock = Sinon.useFakeTimers(time);
    db = await getDBLocal();
    await sampleTrip(db);
  });

  afterEach(function () {
    clock.restore();
  });

  it('trip with id 1', async function () {
    const { trip } = await getTripFromDb(db, 1);
    equal(trip.name, 'Wycieczka');
    equal(trip.desc, 'Tak');
    equal(trip.img, 'https://cdn.mos.cms.futurecdn.net/VWNYrSJUdBNoJbdK9WHgCA-970-80.jpg');
    equal(trip.price, 15);
    equal(trip.start_date, '2022-07-16');
    equal(trip.end_date, '2022-07-31');
    equal(trip.free_seats, 6);
  });

  it('only trips with correct timing', async function () {
    const trips = await getTripsFromDb(db);
    trips.should.have.length(2);
  });

  it('only accepted reservations', async function () {
    const appHandle = app(db);
    const tripId = (await getTripsFromDb(db))[0].id;
    // There is one reservation generated by sampleTrip
    await chai.request('http://localhost:3000').post(`/book/${tripId}`).type('form')
      .send({
        email: 'abc@abc.com',
        first_name: 'Andrzej',
        last_name: 'Andrzej',
        n_people: 4,
      });
    await chai.request('http://localhost:3000').post(`/book/${tripId}`).type('form')
      .send({
        email: 'abc@abc.com',
        first_name: 'Andrzej',
        last_name: 'Andrzej',
        n_people: 4,
      });
    const { reservations } = await getTripReservations(db, tripId);
    expect(reservations).to.have.length(2);
    appHandle.close();
  });

  it('invalid id', async function () {
    await expect(getTripReservations(db, 'a')).to.not.be.rejected;
  });

  it('same data as inserted', async function () {
    const appHandle = app(db);
    const tripId = (await getTripsFromDb(db))[0].id;
    // There is one reservation generated by sampleTrip
    await chai.request('http://localhost:3000').post(`/book/${tripId}`).type('form')
      .send({
        email: 'abc@abc.com',
        first_name: 'Andrzej',
        last_name: 'Jezrdna',
        n_people: 4,
      });
    const { reservations } = await getTripReservations(db, tripId);
    expect(reservations[1].email).to.equal('abc@abc.com');
    expect(reservations[1].name).to.equal('Andrzej');
    expect(reservations[1].surname).to.equal('Jezrdna');
    expect(reservations[1].seats).to.equal(4);
    appHandle.close();
  });
});
